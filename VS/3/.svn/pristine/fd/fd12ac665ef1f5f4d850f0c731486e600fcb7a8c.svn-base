#include <stdio.h>
#include <sys/types.h>
#include <vfilesystem_api.h>
#include <vfilesystem_server_messages.h>
#include <vfilesystem_server_marshaller.h>
#include <string.h>
#include <strings.h>

int32_t mk_FolderInfoResponse(FileServerMessage** fsm){
	FolderInfoRequest* fiRequest = (FolderInfoRequest*)((*fsm)->payload);
	FolderInfoResponse* fiResponse = calloc(1, sizeof(FolderInfoResponse));
	char* name;

	fiResponse->parent = fs_get_folder_parent(fiRequest->handle);
	fiResponse->name_length = fs_get_folder_name_length(fiRequest->handle);

	fiResponse->name = calloc(1, fiResponse->name_length);
	name = calloc(1, fiResponse->name_length);
	fs_get_folder_name(fiRequest->handle, name, fiResponse->name_length);
	memcpy(fiResponse->name, name, fiResponse->name_length);

	fiResponse->file_count = fs_get_folder_file_count(fiRequest->handle);
	fiResponse->files = calloc(fiResponse->file_count, 4);
	fs_get_folder_files(fiRequest->handle, (int32_t*)fiResponse->files, fiResponse->file_count);

	fiResponse->folder_count = fs_get_folder_folder_count(fiRequest->handle);
	fiResponse->folders = calloc(fiResponse->folder_count, 4);
	fs_get_folder_folders(fiRequest->handle, (int32_t*)fiResponse->folders, fiResponse->folder_count);

	(*fsm)->payload_type = FOLDER_INFO_RESPONSE;
	(*fsm)->payload = (uint8_t*)fiResponse;

	return 13+fiResponse->name_length+fiResponse->file_count*4+fiResponse->folder_count*4;
}
