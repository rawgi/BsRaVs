#include <vfilesystem_api.h>
#include <vfilesystem_server_messages.h>
#include <vfilesystem_server_marshaller.h>
#include <stdio.h>
#include <string.h>
#include <strings.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>

int32_t unmarshall(uint8_t* data, uint32_t size, FileServerMessage** msg_out){
	uint8_t type;
	size = ntohl(size);
	memcpy(&type, data, 1);
	switch(type){
		case NEW_FILE_REQUEST: break;
		case NEW_FOLDER_REQUEST: break;
		case DELETE_FILE_REQUEST: break;
		case DELETE_FOLDER_REQUEST: break;
		case FILE_INFO_REQUEST: break;
		case FOLDER_INFO_REQUEST:
			*msg_out = calloc(1,sizeof(FileServerMessage));

			FolderInfoRequest* fir = calloc(1,sizeof(FolderInfoRequest));
			memcpy(&fir->handle, data+1,4);
			fir->handle = ntohl(fir->handle);

			(*msg_out)->payload_type = type;
			(*msg_out)->payload = (uint8_t*)fir;
			break;
		case WRITE_FILE_REQUEST: break;
		default: return -1;
	}
	return 0;
}

void free_message(FileServerMessage* msg){

}

int32_t marshall(uint8_t* data, uint32_t size, FileServerMessage* msg){
	FolderInfoResponse* fir;
	int i, offset = 0;
	uint32_t msgSize = size;
	msgSize = htonl(msgSize);
	memcpy(data, &msgSize, 4);
	offset += 4;
	memcpy(data+offset, &msg->payload_type, 1);
	offset += 1;
	switch(msg->payload_type){
		case NEW_FILE_RESPONSE: break;
		case NEW_FOLDER_RESPONSE: break;
		case DELETE_FILE_RESPONSE: break;
		case DELETE_FOLDER_RESPONSE: break;
		case FILE_INFO_RESPONSE: break;
		case FOLDER_INFO_RESPONSE:
			fir = (FolderInfoResponse*)(msg->payload);
			fir->parent = htonl(fir->parent);
			for(i = 0; i<fir->file_count;i++){
				fir->files[i] = htonl(fir->files[i]);
			}
			fir->file_count = htonl(fir->file_count);
			for(i = 0; i<fir->folder_count;i++){
				fir->folders[i] = htonl(fir->folders[i]);
			}
			fir->folder_count = htonl(fir->folder_count);
			
			memcpy(data+offset, &fir->parent, 4);
			offset += 4;
			memcpy(data+offset, &fir->name_length, 1);
			offset += 1;
			memcpy(data+offset, fir->name, fir->name_length);
			offset += fir->name_length;
			memcpy(data+offset, &fir->file_count, 4);
			offset += 4;
			memcpy(data+offset, fir->files, fir->file_count*4);
			offset += fir->file_count*4;
			memcpy(data+offset, &fir->folder_count, 4);
			offset += 4;
			memcpy(data+offset, fir->folders, fir->folder_count*4);
			offset += fir->folder_count*4;
			printf("offset:%d\n",offset);
			break;
		case WRITE_FILE_RESPONSE: break;
		default: return -1;
	}
	
	return 0;
}





